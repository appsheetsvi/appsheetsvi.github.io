const appId = "ae5d7dce-1c12-4c53-b201-5a2d7c5b5411";
const apiKey = "V2-b1wGR-Nj1SR-0MhEx-QWCHT-Mllly-cZnc9-PHCAK-r1f85";

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á AppSheet ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á filter (‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ‡πÅ‡∏ö‡∏ö Object
 * @param {string} table ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
 * @param {Object} filter ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (optional)
 * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
async function fetchFromTable(table, filter = {}) {
  const response = await fetch(
    `https://api.appsheet.com/api/v2/apps/${appId}/tables/${table}/Find`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ApplicationAccessKey: apiKey,
      },
      body: JSON.stringify({ filter }),
    }
  );

  const data = await response.json();
  return data;
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏°‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô select ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
 */
async function loadDepartments() {
  const list = await fetchFromTable("Department");
  const select = document.querySelector("[name='‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô']");
  select.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å --</option>';
  list.forEach((item) => {
    select.innerHTML += `<option value="${item.DeptCode}">${item.DeptNameEng}</option>`;
  });
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @param {string} deptCode ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ú‡∏ô‡∏Å
 */
async function loadMachines(deptCode) {
  const select = document.querySelector("[name='‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á']");
  select.innerHTML = '<option value="">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</option>';

  if (!deptCode) {
    select.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ --</option>';
    return;
  }

  const list = await fetchFromTable("MachineMaster", { DeptCode: deptCode });

  select.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ --</option>';
  list.forEach((item) => {
    const code = item["‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"];
    const name = item["‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£"];
    const option = document.createElement("option");

    option.value = code; // ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    option.textContent = `${code} - ${name}`; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
    select.appendChild(option);
  });
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô select
 */
async function loadJobTypes() {
  const list = await fetchFromTable("MachineJobType");
  const select = document.querySelector("[name='‡∏ä‡∏ô‡∏¥‡∏î‡∏á‡∏≤‡∏ô']");
  select.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏á‡∏≤‡∏ô --</option>';
  list.forEach((item) => {
    select.innerHTML += `<option value="${item["‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô"]}">${item["‡∏ä‡∏ô‡∏¥‡∏î‡∏á‡∏≤‡∏ô"]}</option>`;
  });
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
 */
async function fetchAutoRequestNumber() {
  const rows = await fetchFromTable("Machinesymptom");
  const input = document.querySelector("[name='‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°']");
  let newCode = "0000001";

  if (rows.length > 0) {
    const max = rows
      .map((r) => r["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°"])
      .filter(Boolean)
      .sort()
      .pop();

    const nextNum = max ? parseInt(max.replace(/[^\d]/g, ""), 10) + 1 : 1;
    newCode = String(nextNum).padStart(7, "0");
  }

  input.value = newCode;
  generateQRCode(newCode); // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô div qrcode
 * @param {string} text ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code
 */
function generateQRCode(text) {
  const container = document.getElementById("qrcode");
  container.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
  new QRCode(container, {
    text: text,
    width: 128,
    height: 128,
    colorDark: "#000000",
    colorLight: "#ffffff",
    correctLevel: QRCode.CorrectLevel.H,
  });
}

// event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏±‡πâ‡∏ô
document
  .querySelector("[name='‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô']")
  .addEventListener("change", (e) => {
    loadMachines(e.target.value);
  });

// event: ‡∏Å‡∏î‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
document
  .getElementById("repairForm")
  .addEventListener("submit", async function (event) {
    event.preventDefault();

    const form = event.target;
    const submitBtn = form.querySelector("button[type='submit']");
    submitBtn.disabled = true;
    submitBtn.textContent = "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô object
    const data = Object.fromEntries(new FormData(form).entries());

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á API
    const payload = {
      Action: "Add",
      Properties: { Locale: "th-TH" },
      Rows: [data],
    };

    try {
      const res = await fetch(
        `https://api.appsheet.com/api/v2/apps/${appId}/tables/Machinesymptom/Action`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            ApplicationAccessKey: apiKey,
          },
          body: JSON.stringify(payload),
        }
      );

      console.log("Payload to API:", JSON.stringify(payload, null, 2));

      const rawText = await res.text();
      const result = rawText ? JSON.parse(rawText) : null;

      if (res.ok && (!result?.Failures?.length)) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        form.reset();
        fetchAutoRequestNumber();
        document.querySelector("[name='‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á']").innerHTML =
          '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ --</option>';
      } else {
        alert(
          "‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " +
            (result ? JSON.stringify(result.Failures) : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API")
        );
      }
    } catch (error) {
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    }
  });

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
loadDepartments();
loadJobTypes();
fetchAutoRequestNumber();
